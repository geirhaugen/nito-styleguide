
// BREAKPOINTS
@breakpoint-small-pluss-one: (@breakpointSmall + 1/@baseFontSize);
@breakpoint-medium-pluss-one: (@breakpointMedium + 1/@baseFontSize);
@breakpoint-large-pluss-one: (@breakpointLarge + 1/@baseFontSize);

.BP-small(@rules) {
  @media screen and (max-width: @breakpointSmall) { @rules(); }
}

.BP-medium(@rules) {
  @media screen and (min-width: @breakpoint-small-pluss-one) and (max-width: @breakpointMedium) { @rules(); }
}

.BP-large(@rules) {
  @media screen and (min-width: @breakpoint-medium-pluss-one) { @rules(); }
}

.BP-medium-down(@rules) {
  @media screen and (max-width: @breakpointMedium) { @rules(); }
}

.BP-medium-up(@rules) {
  @media screen and (min-width: @breakpoint-small-pluss-one) { @rules(); }
}

// FONT IMPORT
//Font import if using local font files
.fontimport(@filename, @fontweight, @fontstyle){
  @font-face {
    font-family: "@{filename}";
    src: url('fonts/@{filename}.eot');
    src: url('fonts/@{filename}.eot?#iefix') format('embedded-opentype'),
    url('fonts/@{filename}.woff') format('woff'),
    url('fonts/@{filename}.ttf') format('truetype'),
    url('fonts/@{filename}.svg#UbuntuItalic') format('svg');
    font-weight: @fontweight;
    font-style: @fontstyle;
  }
}


.establishTypography(){
  font-size: (@baseFontSize / 16) * 1em;
  line-height: (@baseLineHeight / @baseFontSize) * 1em;
  .BP-small({ // SMALL BREAKPOINT
    font-size: (@baseFontSizeMobile / 16) * 1em;
    line-height: (@baseLineHeightMobile / @baseFontSizeMobile) * 1em;
  });
}

// VERTICAL RHYTHM
// Define font size and number of @lineHeight in vertical ryhthm units
.font(@size, @lineHeight: 1){
  font-size: @size/@baseFontSize * 1rem;
  line-height: (@baseLineHeight/@baseFontSize) * @lineHeight * 1rem;
}

// STANDARD CLEARFIX TO CLEAR FLOATS
.clearfix(){
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// CONTAINER
// Adds max widths and padding to an element
.container(@padded: @basePadding){
  max-width: @maxWidth;
  margin: 0 auto;
  padding: 0 @padded;
  .BP-small({ // SMALL BREAKPOINT
    padding: 0 @padded/2;
  });
  .clearfix();
}

// TRAILER
// Adds 1 baselineunit margin after an element
.trailer(@numberOfUnits: 1){
  margin-bottom: (@baseLineHeight/@baseFontSize) * @numberOfUnits * 1rem;
  .BP-small({ // SMALL BREAKPOINT
      margin-bottom: (@baseLineHeightMobile/@baseFontSizeMobile) * 1rem;
  });
}

// Code helpers
// ****************************
.baseline() when (@debug = true){
  background: -webkit-gradient(linear, left top, left bottom, from(#fcfcfc), color-stop(95%, #fcfcfc), color-stop(95%, #4affff), to(#4affff));
  background: -moz-linear-gradient(top, #fcfcfc, #fcfcfc 95%, #4affff 95%, #4affff);
  border-width: 1px 1px 0 1px;
  border-color: #4affff;
  border-style: solid;
  .BP-medium-up({ // @MEDIUM UP BREAKPOINT
    background-size: auto @baseLineHeight;
  });
  .BP-small({ // SMALL BREAKPOINT
    background-size: auto @baseLineHeightMobile;
  });
}
.displayGrid() when (@showGrid = true){
  background: #f4f4f4;
  border: 1px solid #4affff;
}

.viewHelpers{
  [class*=col]{
    .displayGrid();
  }
}


// Inject a small text  telling you wich breakpoint is the current one. Change body to the element you want to use
body{
  .helper(@showBreakPoints);
}

.helper(@debug) when (@debug = true){
  &:before{
    z-index: 400000;
    color: black;
    text-align: right;
    position: fixed;
    bottom: 50px;
    right: 0;
    padding: 3px 10px;
    border-left: 1px solid red;
    border-radius: 5px 0 0 5px;
    background: rgba(255, 255, 255, 0.8);
    opacity: 0.3;
    @media screen and (max-width: @breakpointSmall){
      content: "small";
    }
    @media screen and (min-width: @breakpointSmall) and (max-width: @breakpointMedium){
      content: "medium";
    }
    @media screen and (min-width: @breakpointMedium){
      content: "large";
    }
  }
}

// Visibility for various sizes
//***********************************
.hide-for-small {
  .BP-small({ // SMALL BREAKPOINT
    display: none !important;
  });
}

.hide-for-medium {
  .BP-medium({ // MEDIUM BREAKPOINT
    display: none !important;
  });
}

.hide-for-large {
  .BP-large({ // LARGE BREAKPOINT
    display: none !important;
  });
}